Пройдемося спочатку по ТЗ:

1.Кінцева програма повинна бути зібрана у форматі jar. Сам jar файл розмістити в releases на github.

З цим не було проблем, єдине хочу зазначити, що через обрану структуру, коли ви спробуєте запустити jar файл,
вам потрібно буде вводити параметри вже після запуску файлу, а не одразу. Наприклад:

java -jar шлях до файлу

2.Програму можна запустити із консолі передавши аргументи.

З програмою можна взаємодіяти трьома шляхами: через консоль, через applications (через IntelliJ) та через GUI.
Ну і також, звісно, можна запусти jar файл у консолі.

3.Результатом роботи програми в папці з початковим файлом повинен з'явитися файл з тим самим ім'ям,
що і вхідний файл, але з поміткою [ENCRYPTED] / [DECRYPTED] в залежності від виконаної операції.

Після виконання команди encrypt (у програмі не має значення регістр) отримуємо файл з поміткою [ENCRYPTED],
після decrypt - файл з поміткою [DECRYPTED] (якщо у файла була позначка [ENCRYPTED], вона замінюється, щоб не було 2х
позначок одразу)
після brute-force - також файл з поміткою [DECRYPTED]

4.Зміст файлу повинен бути закодований/декодований використовуючи шифр Цезаря.

Шифр Цезаря було успішно реалізовано (принайні на мою думку)

5.Кодуються лише літери англійського алфавіту (великі та малі).

У програмі кодуються усі літери англійського, російського та українського алфавітів (великі та малі).
Також знаки пунктуації, але це ніяк не вплинуло на реалізацію брут-форсу

6.Після розшифрування текст має максимально зберегти оригінальне форматування
(пробіли, відступи, перенесення на наступний рядок, знаки, великі та малі літери).
В ідеалі текст не має взагалі відрізнятись.

Розшифрування реалізовано вдало, під час тестування різницю я не помітив.

7.Програма повинна використовувати один і той же ключ для коректного кодування та декодування файлу.

З цим розібрався

8.Програма має мати режим brute-force для автоматичного підбору ключа під зашифрований текст та його розшифрування.

Хоч і реалізований примітивно, але хоч якийсь робочий брут-форс є

9.Код програми та готовий зібраний файл jar розмістити на GitHub.

Зроблено, як ви могли помітити)

10.Написати про проект коротко в readme.

Теж вочевидь впорався
----------------------------------
Тепер стосовно додаткових завдань:

1.Поліглот. Додати підтримку кодування тексту Українською мовою.

У програмі можна використовувати українські тексти. Взагалі скоріш за все можна ще й російські, бо український
алфавіт додавався поверх російського, але я не тестував.

2.Алгоритм "креатор". Визначати автоматично який алфавіт використовувати для тексту (укр/англ).

Під час написання readme файлу я збагнув, що можливо не зовсім коректно реалізував шифр Цезаря, проте це не сказалося
на його працездатності. Я маю на увазі, що у мене реалізований один великий словник, тобто фактично я зліпив
алфавіти та знаки пунктуації в один великий. Тому, напевно, можна вважати, що я не впорався з цим пунктом, хоча
й працювати з текстами цих двох мов програма працюватиме без проблем.

3.Поціновувач зручності.

З CLI я не розбирався, тому не реалізовував

4.Частотний аналіз(Криптограф)

Також не став чіпати, бо у меня брут-форс реалізований по-іншому

5.Front-end. GUI (Swing, JavaFX)

Простенький GUI зліпив, єдина проблема, яки виникла з ним, коли я у MainFrame викликаю роботу InputFrame,
InputFrame виводиться без форматування тексту, кнопок, країв і т.п.
Ви можете перевірити окремо запуск цих фреймів, окремо у мене все запускається красиво.
Можливо проблема пов'язана з тим, що я працюю на MacOS, проте рішення проблеми я так і не знайшов,
буду вдячний, якщо підкажите :)
Концептуально я розумію проблему, якщо у іншому методі вони чудово запускаються, то проблема скоріш за все пов'язана
з викликом InputFrame після натискання кнопки, але додуматись до чогось більше й ще тим паче до рішення я не зміг.
І щоб ви не вважали, що я вигадав про те, що у мене все красиво, якщо запускається окремо, надаю посилання
на гугл документ зі скрінами того, як виглядають фрейми коли запускаться як треба та як окремо.

https://docs.google.com/document/d/1xlJmbVWDL-cZ-ktcqVL1L6IHTd-LBxruamf7IKkbUNk/edit?usp=sharing
-----------------------------------
Тепер особисті коментарі, якщо ви ще читаєте цей файл.

Стосовно команд, як було вже зазначено, регістр не має значення, тобто можна вводити encrypt, DECRYPT, байдуже.
Єдиний особливий момент, стосовно brute-force. Я не прибирав потребу вводити ключ, коли викликається ця команда,
тому потреба у вводі ключа залишається, хоч він і на що і не вплине.

Стосовно реалізації шифру, я вже зазначав, що скоріш за все зробив його некорректно, але сил та часу переробляти вже
не має. Я задоволений принайні тим, що хоч працює.

Стосовно структури програми, я особоливого нічого не вигадував, зробив один клас абстракним та реалізував успадкування
(взагалі ще імплементував клас, але це не моя ініціатива, а Свінгу), щоб програма хоч трохи походила на щось людяне.

Наче все, коментарі у коді також є, де я вважав, що вам можуть допомогти, або де я не полінився. Дякую за увагу :)
